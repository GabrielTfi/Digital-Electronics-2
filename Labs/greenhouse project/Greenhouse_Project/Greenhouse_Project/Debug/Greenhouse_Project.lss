
Greenhouse_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000862  000008f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  0080012e  0080012e  00000924  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018be  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab3  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b3c  00000000  00000000  00002e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00003974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ee  00000000  00000000  0000436e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_18>
  4c:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  9e:	0c 94 2f 04 	jmp	0x85e	; 0x85e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); 
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_toggle+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_toggle+0xa>
 102:	24 27       	eor	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret

00000108 <closeWindow>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <closeWindow+0x6>
 116:	00 c0       	rjmp	.+0      	; 0x118 <closeWindow+0x10>
 118:	00 00       	nop

//function to close the window
void closeWindow (){
	for ( int i = 0; i < 50000; i++){
		_delay_ms(20);
		GPIO_toggle(&PORTC, SERVO_M);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 124:	8f e3       	ldi	r24, 0x3F	; 63
 126:	9f e1       	ldi	r25, 0x1F	; 31
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <closeWindow+0x20>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <closeWindow+0x26>
 12e:	00 00       	nop
		_delay_ms(2);
		GPIO_toggle(&PORTC, SERVO_M);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 13a:	e6 cf       	rjmp	.-52     	; 0x108 <closeWindow>

0000013c <openWindow>:
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <openWindow+0x6>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <openWindow+0x10>
 14c:	00 00       	nop

//function to open the window
void openWindow(){
	for ( int i = 0; i < 50000; i++){
		_delay_ms(20);
		GPIO_toggle(&PORTC, SERVO_M);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <openWindow+0x20>
 160:	00 c0       	rjmp	.+0      	; 0x162 <openWindow+0x26>
 162:	00 00       	nop
		_delay_ms(1);
		GPIO_toggle(&PORTC, SERVO_M);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 16e:	e6 cf       	rjmp	.-52     	; 0x13c <openWindow>

00000170 <main>:


int main(void)
{
	
	GPIO_config_output(&DDRC, SERVO_M); // SERVO_M at PORTC configuration
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	87 e2       	ldi	r24, 0x27	; 39
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, LED); // LED at PORTB configuration
 17a:	63 e0       	ldi	r22, 0x03	; 3
 17c:	84 e2       	ldi	r24, 0x24	; 36
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, RELAY1); // RELAY1 at PORTB configuration
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	84 e2       	ldi	r24, 0x24	; 36
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, RELAY2); // RELAY2 at PORTB configuration
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	84 e2       	ldi	r24, 0x24	; 36
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	
	GPIO_write_low(&PORTC, SERVO_M);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, LED);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, RELAY1); 
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	85 e2       	ldi	r24, 0x25	; 37
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, RELAY2);
 1b6:	64 e0       	ldi	r22, 0x04	; 4
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// the window is closed at the beginning of the program
	closeWindow();
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>

000001c4 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose : FSM in order to update the input variables
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	1f 93       	push	r17
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	ef 93       	push	r30
 1e6:	ff 93       	push	r31
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <__vector_13+0x2a>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
	//Start ADC conversion ( for the light sensor )
	ADCSRA |= (1<<ADSC);
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
	
	
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 0x5c;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus 
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 1fc:	80 e3       	ldi	r24, 0x30	; 48
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	9a 83       	std	Y+2, r25	; 0x02
 202:	89 83       	std	Y+1, r24	; 0x01
    // FSM
    switch (state)
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	82 30       	cpi	r24, 0x02	; 2
 20a:	51 f0       	breq	.+20     	; 0x220 <__vector_13+0x5c>
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	09 f4       	brne	.+2      	; 0x212 <__vector_13+0x4e>
 210:	90 c0       	rjmp	.+288    	; 0x332 <__vector_13+0x16e>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <__vector_13+0x54>
 216:	a1 c0       	rjmp	.+322    	; 0x35a <__vector_13+0x196>
    {
		
    case STATE_IDLE:
		state = STATE_SEND;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 21e:	a0 c0       	rjmp	.+320    	; 0x360 <__vector_13+0x19c>
    
    // Transmit I2C slave address and get result
    case STATE_SEND:

        result = twi_start((addr<<1) + TWI_WRITE); 
 220:	88 eb       	ldi	r24, 0xB8	; 184
 222:	0e 94 41 03 	call	0x682	; 0x682 <twi_start>
		
	
		/* temperature and humidity data retrieve */
		
		//determining which parameter should be measured
		if (switchMeasure == 0)
 226:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 22a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	21 f4       	brne	.+8      	; 0x23a <__vector_13+0x76>
			twi_write(0x02); //0x02 for temperature
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 5e 03 	call	0x6bc	; 0x6bc <twi_write>
 238:	05 c0       	rjmp	.+10     	; 0x244 <__vector_13+0x80>
		else if(switchMeasure == 1)
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	19 f4       	brne	.+6      	; 0x244 <__vector_13+0x80>
			twi_write(0x00); //0x00 for humidity
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 5e 03 	call	0x6bc	; 0x6bc <twi_write>
		
		if ( switchMeasure  <= 1 ){
 244:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 248:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 24c:	02 97       	sbiw	r24, 0x02	; 2
 24e:	0c f0       	brlt	.+2      	; 0x252 <__vector_13+0x8e>
 250:	59 c0       	rjmp	.+178    	; 0x304 <__vector_13+0x140>
			twi_stop();
 252:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <twi_stop>
			result = twi_start((addr<<1) + TWI_READ);
 256:	89 eb       	ldi	r24, 0xB9	; 185
 258:	0e 94 41 03 	call	0x682	; 0x682 <twi_start>
			
			//getting the integer part of the result
			result = twi_read_ack();
 25c:	0e 94 68 03 	call	0x6d0	; 0x6d0 <twi_read_ack>
			
			//writing the integer part into the input variables 
			if (switchMeasure == 0){
 260:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <switchMeasure>
 264:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <switchMeasure+0x1>
 268:	21 15       	cp	r18, r1
 26a:	31 05       	cpc	r19, r1
 26c:	31 f4       	brne	.+12     	; 0x27a <__vector_13+0xb6>
				temperature = result;
 26e:	48 2f       	mov	r20, r24
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	50 93 31 01 	sts	0x0131, r21	; 0x800131 <temperature+0x1>
 276:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <temperature>
			}
			if (switchMeasure == 1){
 27a:	21 30       	cpi	r18, 0x01	; 1
 27c:	31 05       	cpc	r19, r1
 27e:	31 f4       	brne	.+12     	; 0x28c <__vector_13+0xc8>
				humidity = result;
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <humidity+0x1>
 288:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <humidity>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 28c:	4a e0       	ldi	r20, 0x0A	; 10
 28e:	be 01       	movw	r22, r28
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__itoa_ncheck>
			}
			
			//printing on the uart the result
			itoa(result, uart_string, 10);
			uart_puts(uart_string);
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
			
			//getting the fractional part of the result
			result = twi_read_nack();
 2a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <twi_read_nack>
 2a6:	18 2f       	mov	r17, r24
			twi_stop();
 2a8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <twi_stop>
 2ac:	4a e0       	ldi	r20, 0x0A	; 10
 2ae:	be 01       	movw	r22, r28
 2b0:	6f 5f       	subi	r22, 0xFF	; 255
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	81 2f       	mov	r24, r17
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__itoa_ncheck>
			
			//printing the fractional part on the uart
			itoa(result, uart_string, 10);
			uart_puts(".");
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
			uart_puts(uart_string);
 2c4:	ce 01       	movw	r24, r28
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
			uart_puts(" ");
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
			
			//printing the corresponding unit
			if (switchMeasure == 0)
 2d4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 2d8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 2dc:	89 2b       	or	r24, r25
 2de:	21 f4       	brne	.+8      	; 0x2e8 <__vector_13+0x124>
				uart_puts("Celsius degrees");
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
				
			if (switchMeasure == 1)
 2e8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 2ec:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	21 f4       	brne	.+8      	; 0x2fc <__vector_13+0x138>
				uart_puts("% of humidity");
 2f4:	85 e1       	ldi	r24, 0x15	; 21
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
				
			uart_puts(" ");
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
		}
		
		switchMeasure ++; // adding 1 in order to switch to the next parameter to be measured ( cycling order )
 304:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 308:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <switchMeasure+0x1>
 312:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <switchMeasure>
		
		// if the cycle has ended, the counter is set to 0 and the process is repeated
		if ( switchMeasure == 3 ){
 316:	03 97       	sbiw	r24, 0x03	; 3
 318:	41 f4       	brne	.+16     	; 0x32a <__vector_13+0x166>
			switchMeasure = 0; 
 31a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <switchMeasure+0x1>
 31e:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <switchMeasure>
			uart_puts("\r\n"); // carrier return in the uart
 322:	83 e2       	ldi	r24, 0x23	; 35
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
		}
		
		state = STATE_IDLE;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 330:	17 c0       	rjmp	.+46     	; 0x360 <__vector_13+0x19c>
 332:	40 e1       	ldi	r20, 0x10	; 16
 334:	be 01       	movw	r22, r28
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	8c e5       	ldi	r24, 0x5C	; 92
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__itoa_ncheck>
    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		
		itoa(addr, uart_string, 16);
		uart_puts(uart_string);
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
		uart_puts(" ");
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
		state = STATE_IDLE;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 358:	03 c0       	rjmp	.+6      	; 0x360 <__vector_13+0x19c>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	1f 91       	pop	r17
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_21>:
	
ISR(ADC_vect)
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <__vector_21+0x28>
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <__vector_21+0x2a>
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
	if ( switchMeasure == 2){
 3ba:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <switchMeasure>
 3be:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <switchMeasure+0x1>
 3c2:	02 97       	sbiw	r24, 0x02	; 2
 3c4:	31 f5       	brne	.+76     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		
		
		uint16_t value = 0;
		char lcd_string[4] = "";
 3c6:	1a 82       	std	Y+2, r1	; 0x02
 3c8:	19 82       	std	Y+1, r1	; 0x01
 3ca:	1c 82       	std	Y+4, r1	; 0x04
 3cc:	1b 82       	std	Y+3, r1	; 0x03
		
		value = ADC;                  // Copy ADC result to 16-bit variable
 3ce:	e8 e7       	ldi	r30, 0x78	; 120
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	91 81       	ldd	r25, Z+1	; 0x01
		light = ADC;
 3d6:	20 81       	ld	r18, Z
 3d8:	31 81       	ldd	r19, Z+1	; 0x01
 3da:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__data_end+0x1>
 3de:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__itoa_ncheck>
		itoa(value, lcd_string, 10);  // Convert decimal value to string

		//Send ADC value to UART Tx
		if ( change == false ){
 3ee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <change>
 3f2:	81 11       	cpse	r24, r1
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			uart_puts(lcd_string);
 3f6:	ce 01       	movw	r24, r28
 3f8:	01 96       	adiw	r24, 0x01	; 1
 3fa:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
			uart_puts(" light");
 3fe:	86 e2       	ldi	r24, 0x26	; 38
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 ed 03 	call	0x7da	; 0x7da <uart_puts>
		}
		change = !change;
 406:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <change>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	89 27       	eor	r24, r25
 40e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <change>
	}
}
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_9>:
/* Interrupt service routines ----------------------------------------*/
/**********************************************************************
 * Function: Timer/Counter2 overflow interrupt
 * Purpose : output manager 
 **********************************************************************/
ISR(TIMER2_OVF_vect){
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	ef 93       	push	r30
 460:	ff 93       	push	r31
	
	// turn on the LED if the light is low 
	if ( light < 320 ){
 462:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 466:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 46a:	80 34       	cpi	r24, 0x40	; 64
 46c:	91 40       	sbci	r25, 0x01	; 1
 46e:	30 f4       	brcc	.+12     	; 0x47c <__vector_9+0x3c>
		GPIO_write_high(&PORTB, LED);
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	85 e2       	ldi	r24, 0x25	; 37
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__vector_9+0x46>
	}
	else{
		GPIO_write_low(&PORTB, LED); 
 47c:	63 e0       	ldi	r22, 0x03	; 3
 47e:	85 e2       	ldi	r24, 0x25	; 37
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	/* Determining the actions of the outputs in function 
	of the parameters humidity and temperature */
	
	//high temperature and high humidity
	if (temperature > 27 && humidity > 30){
 486:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 48a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 48e:	4c 97       	sbiw	r24, 0x1c	; 28
 490:	b0 f0       	brcs	.+44     	; 0x4be <__vector_9+0x7e>
 492:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 496:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 49a:	4f 97       	sbiw	r24, 0x1f	; 31
 49c:	80 f0       	brcs	.+32     	; 0x4be <__vector_9+0x7e>
		
		// stop irrigation and start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 49e:	65 e0       	ldi	r22, 0x05	; 5
 4a0:	85 e2       	ldi	r24, 0x25	; 37
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 4a8:	64 e0       	ldi	r22, 0x04	; 4
 4aa:	85 e2       	ldi	r24, 0x25	; 37
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 4b2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 4b6:	81 11       	cpse	r24, r1
 4b8:	d3 c0       	rjmp	.+422    	; 0x660 <__vector_9+0x220>
				openWindow();
 4ba:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
		}
	}
	
	
	//high temperature and low humidity
	else if ( temperature > 27 && humidity < 5){
 4be:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 4c2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 4c6:	4c 97       	sbiw	r24, 0x1c	; 28
 4c8:	b0 f0       	brcs	.+44     	; 0x4f6 <__vector_9+0xb6>
 4ca:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 4ce:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 4d2:	05 97       	sbiw	r24, 0x05	; 5
 4d4:	80 f4       	brcc	.+32     	; 0x4f6 <__vector_9+0xb6>
		
		// start irrigation and start ventilation
		GPIO_write_high(&PORTB, RELAY1);
 4d6:	65 e0       	ldi	r22, 0x05	; 5
 4d8:	85 e2       	ldi	r24, 0x25	; 37
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_high(&PORTB, RELAY2);
 4e0:	64 e0       	ldi	r22, 0x04	; 4
 4e2:	85 e2       	ldi	r24, 0x25	; 37
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 4ea:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 4ee:	81 11       	cpse	r24, r1
 4f0:	b7 c0       	rjmp	.+366    	; 0x660 <__vector_9+0x220>
			openWindow();
 4f2:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//low temperature and high humidity
	else if ( temperature < 10 && humidity > 30){
 4f6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 4fa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 4fe:	0a 97       	sbiw	r24, 0x0a	; 10
 500:	b8 f4       	brcc	.+46     	; 0x530 <__vector_9+0xf0>
 502:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 506:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 50a:	4f 97       	sbiw	r24, 0x1f	; 31
 50c:	88 f0       	brcs	.+34     	; 0x530 <__vector_9+0xf0>
		// stop irrigation and start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 50e:	65 e0       	ldi	r22, 0x05	; 5
 510:	85 e2       	ldi	r24, 0x25	; 37
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 518:	64 e0       	ldi	r22, 0x04	; 4
 51a:	85 e2       	ldi	r24, 0x25	; 37
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// close the window
		if ( windowState == true){
 522:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 526:	88 23       	and	r24, r24
 528:	09 f4       	brne	.+2      	; 0x52c <__vector_9+0xec>
 52a:	9a c0       	rjmp	.+308    	; 0x660 <__vector_9+0x220>
			closeWindow();
 52c:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
	
	//low temperature and low humidity
	else if ( temperature < 10 && humidity < 5){
 530:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 534:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 538:	0a 97       	sbiw	r24, 0x0a	; 10
 53a:	b8 f4       	brcc	.+46     	; 0x56a <__vector_9+0x12a>
 53c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 540:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 544:	05 97       	sbiw	r24, 0x05	; 5
 546:	88 f4       	brcc	.+34     	; 0x56a <__vector_9+0x12a>
		// start irrigation and stop ventilation
		GPIO_write_high(&PORTB, RELAY1);
 548:	65 e0       	ldi	r22, 0x05	; 5
 54a:	85 e2       	ldi	r24, 0x25	; 37
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_low(&PORTB, RELAY2);
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	85 e2       	ldi	r24, 0x25	; 37
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 55c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 560:	88 23       	and	r24, r24
 562:	09 f4       	brne	.+2      	; 0x566 <__vector_9+0x126>
 564:	7d c0       	rjmp	.+250    	; 0x660 <__vector_9+0x220>
			closeWindow();
 566:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
	
	//high temperature 
	else if ( temperature > 27 ){
 56a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 56e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 572:	4c 97       	sbiw	r24, 0x1c	; 28
 574:	80 f0       	brcs	.+32     	; 0x596 <__vector_9+0x156>
		// start irrigation and start ventilation
		GPIO_write_high(&PORTB, RELAY1); 
 576:	65 e0       	ldi	r22, 0x05	; 5
 578:	85 e2       	ldi	r24, 0x25	; 37
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_high(&PORTB, RELAY2);
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	85 e2       	ldi	r24, 0x25	; 37
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 58a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 58e:	81 11       	cpse	r24, r1
 590:	67 c0       	rjmp	.+206    	; 0x660 <__vector_9+0x220>
			openWindow();
 592:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//high humidity
	else if ( humidity > 30){
 596:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 59a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 59e:	4f 97       	sbiw	r24, 0x1f	; 31
 5a0:	80 f0       	brcs	.+32     	; 0x5c2 <__vector_9+0x182>
		
		// start ventilation
		GPIO_write_low(&PORTB, RELAY1);
 5a2:	65 e0       	ldi	r22, 0x05	; 5
 5a4:	85 e2       	ldi	r24, 0x25	; 37
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_high(&PORTB, RELAY2);
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	85 e2       	ldi	r24, 0x25	; 37
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		
		// open the window
		if ( windowState == false){
 5b6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 5ba:	81 11       	cpse	r24, r1
 5bc:	51 c0       	rjmp	.+162    	; 0x660 <__vector_9+0x220>
			openWindow();
 5be:	0e 94 9e 00 	call	0x13c	; 0x13c <openWindow>
			windowState = true;
		}
	}
	
	//low temperature 
	else if ( temperature < 10){
 5c2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <temperature>
 5c6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <temperature+0x1>
 5ca:	0a 97       	sbiw	r24, 0x0a	; 10
 5cc:	20 f5       	brcc	.+72     	; 0x616 <__vector_9+0x1d6>
		
		// stop irrigation and stop ventilation
		GPIO_write_low(&PORTB, RELAY1);
 5ce:	65 e0       	ldi	r22, 0x05	; 5
 5d0:	85 e2       	ldi	r24, 0x25	; 37
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_low(&PORTB, RELAY2);
 5d8:	64 e0       	ldi	r22, 0x04	; 4
 5da:	85 e2       	ldi	r24, 0x25	; 37
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	99 ef       	ldi	r25, 0xF9	; 249
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	81 50       	subi	r24, 0x01	; 1
 5ea:	90 40       	sbci	r25, 0x00	; 0
 5ec:	20 40       	sbci	r18, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__vector_9+0x1a8>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__vector_9+0x1b2>
 5f2:	00 00       	nop
		
		// close the window
		for ( int i = 0; i < 50000; i++){
			_delay_ms(20);
			GPIO_toggle(&PORTC, SERVO_M);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	88 e2       	ldi	r24, 0x28	; 40
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 5fe:	8f e3       	ldi	r24, 0x3F	; 63
 600:	9f e1       	ldi	r25, 0x1F	; 31
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <__vector_9+0x1c2>
 606:	00 c0       	rjmp	.+0      	; 0x608 <__vector_9+0x1c8>
 608:	00 00       	nop
			_delay_ms(2);
			GPIO_toggle(&PORTC, SERVO_M);
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	88 e2       	ldi	r24, 0x28	; 40
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
 614:	e6 cf       	rjmp	.-52     	; 0x5e2 <__vector_9+0x1a2>
		}
	}
	
	//low humidity
	else if ( humidity < 5){
 616:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <humidity>
 61a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <humidity+0x1>
 61e:	05 97       	sbiw	r24, 0x05	; 5
 620:	80 f4       	brcc	.+32     	; 0x642 <__vector_9+0x202>
		
		// start irrigation and stop ventilation
		GPIO_write_high(&PORTB, RELAY1);
 622:	65 e0       	ldi	r22, 0x05	; 5
 624:	85 e2       	ldi	r24, 0x25	; 37
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
		GPIO_write_low(&PORTB, RELAY2);
 62c:	64 e0       	ldi	r22, 0x04	; 4
 62e:	85 e2       	ldi	r24, 0x25	; 37
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 636:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 63a:	88 23       	and	r24, r24
 63c:	89 f0       	breq	.+34     	; 0x660 <__vector_9+0x220>
			closeWindow();
 63e:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
	}
	
	//if the parameters are at the optimal level
	else{
		// stop irrigation and stop ventilation
		GPIO_write_low(&PORTB, RELAY1);
 642:	65 e0       	ldi	r22, 0x05	; 5
 644:	85 e2       	ldi	r24, 0x25	; 37
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		GPIO_write_low(&PORTB, RELAY2);
 64c:	64 e0       	ldi	r22, 0x04	; 4
 64e:	85 e2       	ldi	r24, 0x25	; 37
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		// close the window
		if ( windowState == true){
 656:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <windowState>
 65a:	81 11       	cpse	r24, r1
			closeWindow();
 65c:	0e 94 84 00 	call	0x108	; 0x108 <closeWindow>
			windowState = false;
		}
	}
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 682:	94 ea       	ldi	r25, 0xA4	; 164
 684:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 688:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 68c:	99 23       	and	r25, r25
 68e:	e4 f7       	brge	.-8      	; 0x688 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 690:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 694:	84 e8       	ldi	r24, 0x84	; 132
 696:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 69a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 69e:	88 23       	and	r24, r24
 6a0:	e4 f7       	brge	.-8      	; 0x69a <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 6a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 6a6:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 6a8:	88 31       	cpi	r24, 0x18	; 24
 6aa:	21 f0       	breq	.+8      	; 0x6b4 <twi_start+0x32>
 6ac:	80 34       	cpi	r24, 0x40	; 64
 6ae:	21 f4       	brne	.+8      	; 0x6b8 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	08 95       	ret
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 6b8:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 6ba:	08 95       	ret

000006bc <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 6bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 6c0:	84 e8       	ldi	r24, 0x84	; 132
 6c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 6c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ca:	88 23       	and	r24, r24
 6cc:	e4 f7       	brge	.-8      	; 0x6c6 <twi_write+0xa>
}
 6ce:	08 95       	ret

000006d0 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 6d0:	84 ec       	ldi	r24, 0xC4	; 196
 6d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 6d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6da:	88 23       	and	r24, r24
 6dc:	e4 f7       	brge	.-8      	; 0x6d6 <twi_read_ack+0x6>
    return (TWDR);
 6de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 6e2:	08 95       	ret

000006e4 <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 6e4:	84 e8       	ldi	r24, 0x84	; 132
 6e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 6ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6ee:	88 23       	and	r24, r24
 6f0:	e4 f7       	brge	.-8      	; 0x6ea <twi_read_nack+0x6>
    return (TWDR);
 6f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 6f6:	08 95       	ret

000006f8 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 6f8:	84 e9       	ldi	r24, 0x94	; 148
 6fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6fe:	08 95       	ret

00000700 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	2f 93       	push	r18
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
 714:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 718:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 71c:	8c 71       	andi	r24, 0x1C	; 28
 71e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART_RxHead>
 722:	ef 5f       	subi	r30, 0xFF	; 255
 724:	ef 71       	andi	r30, 0x1F	; 31
 726:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <UART_RxTail>
 72a:	e9 17       	cp	r30, r25
 72c:	39 f0       	breq	.+14     	; 0x73c <__vector_18+0x3c>
 72e:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <UART_RxHead>
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	e3 5c       	subi	r30, 0xC3	; 195
 736:	fe 4f       	sbci	r31, 0xFE	; 254
 738:	20 83       	st	Z, r18
 73a:	01 c0       	rjmp	.+2      	; 0x73e <__vector_18+0x3e>
 73c:	82 e0       	ldi	r24, 0x02	; 2
 73e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_LastRxError>
 742:	89 2b       	or	r24, r25
 744:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <UART_LastRxError>
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <__vector_19>:
 75c:	1f 92       	push	r1
 75e:	0f 92       	push	r0
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
 766:	8f 93       	push	r24
 768:	9f 93       	push	r25
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
 76e:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <UART_TxHead>
 772:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <UART_TxTail>
 776:	98 17       	cp	r25, r24
 778:	69 f0       	breq	.+26     	; 0x794 <__vector_19+0x38>
 77a:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <UART_TxTail>
 77e:	ef 5f       	subi	r30, 0xFF	; 255
 780:	ef 71       	andi	r30, 0x1F	; 31
 782:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <UART_TxTail>
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	e3 5a       	subi	r30, 0xA3	; 163
 78a:	fe 4f       	sbci	r31, 0xFE	; 254
 78c:	80 81       	ld	r24, Z
 78e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 792:	05 c0       	rjmp	.+10     	; 0x79e <__vector_19+0x42>
 794:	e1 ec       	ldi	r30, 0xC1	; 193
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	8f 7d       	andi	r24, 0xDF	; 223
 79c:	80 83       	st	Z, r24
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	9f 91       	pop	r25
 7a4:	8f 91       	pop	r24
 7a6:	0f 90       	pop	r0
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	0f 90       	pop	r0
 7ac:	1f 90       	pop	r1
 7ae:	18 95       	reti

000007b0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 7b0:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <UART_TxHead>
 7b4:	2f 5f       	subi	r18, 0xFF	; 255
 7b6:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 7b8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_TxTail>
 7bc:	29 17       	cp	r18, r25
 7be:	e1 f3       	breq	.-8      	; 0x7b8 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 7c0:	e2 2f       	mov	r30, r18
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	e3 5a       	subi	r30, 0xA3	; 163
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 7ca:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 7ce:	e1 ec       	ldi	r30, 0xC1	; 193
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	80 62       	ori	r24, 0x20	; 32
 7d6:	80 83       	st	Z, r24
 7d8:	08 95       	ret

000007da <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	ec 01       	movw	r28, r24
    while (*s)
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <uart_puts+0xe>
        uart_putc(*s++);
 7e2:	21 96       	adiw	r28, 0x01	; 1
 7e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 7e8:	88 81       	ld	r24, Y
 7ea:	81 11       	cpse	r24, r1
 7ec:	fa cf       	rjmp	.-12     	; 0x7e2 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <__itoa_ncheck>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	4a 30       	cpi	r20, 0x0A	; 10
 7f8:	31 f4       	brne	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	99 23       	and	r25, r25
 7fc:	22 f4       	brpl	.+8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fe:	bd e2       	ldi	r27, 0x2D	; 45
 800:	90 95       	com	r25
 802:	81 95       	neg	r24
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	0c 94 06 04 	jmp	0x80c	; 0x80c <__utoa_common>

0000080a <__utoa_ncheck>:
 80a:	bb 27       	eor	r27, r27

0000080c <__utoa_common>:
 80c:	fb 01       	movw	r30, r22
 80e:	55 27       	eor	r21, r21
 810:	aa 27       	eor	r26, r26
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	aa 1f       	adc	r26, r26
 818:	a4 17       	cp	r26, r20
 81a:	10 f0       	brcs	.+4      	; 0x820 <__utoa_common+0x14>
 81c:	a4 1b       	sub	r26, r20
 81e:	83 95       	inc	r24
 820:	50 51       	subi	r21, 0x10	; 16
 822:	b9 f7       	brne	.-18     	; 0x812 <__utoa_common+0x6>
 824:	a0 5d       	subi	r26, 0xD0	; 208
 826:	aa 33       	cpi	r26, 0x3A	; 58
 828:	08 f0       	brcs	.+2      	; 0x82c <__utoa_common+0x20>
 82a:	a9 5d       	subi	r26, 0xD9	; 217
 82c:	a1 93       	st	Z+, r26
 82e:	00 97       	sbiw	r24, 0x00	; 0
 830:	79 f7       	brne	.-34     	; 0x810 <__utoa_common+0x4>
 832:	b1 11       	cpse	r27, r1
 834:	b1 93       	st	Z+, r27
 836:	11 92       	st	Z+, r1
 838:	cb 01       	movw	r24, r22
 83a:	0c 94 1f 04 	jmp	0x83e	; 0x83e <strrev>

0000083e <strrev>:
 83e:	dc 01       	movw	r26, r24
 840:	fc 01       	movw	r30, r24
 842:	67 2f       	mov	r22, r23
 844:	71 91       	ld	r23, Z+
 846:	77 23       	and	r23, r23
 848:	e1 f7       	brne	.-8      	; 0x842 <strrev+0x4>
 84a:	32 97       	sbiw	r30, 0x02	; 2
 84c:	04 c0       	rjmp	.+8      	; 0x856 <strrev+0x18>
 84e:	7c 91       	ld	r23, X
 850:	6d 93       	st	X+, r22
 852:	70 83       	st	Z, r23
 854:	62 91       	ld	r22, -Z
 856:	ae 17       	cp	r26, r30
 858:	bf 07       	cpc	r27, r31
 85a:	c8 f3       	brcs	.-14     	; 0x84e <strrev+0x10>
 85c:	08 95       	ret

0000085e <_exit>:
 85e:	f8 94       	cli

00000860 <__stop_program>:
 860:	ff cf       	rjmp	.-2      	; 0x860 <__stop_program>
