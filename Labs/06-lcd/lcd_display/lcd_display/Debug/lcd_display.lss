
lcd_display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000049a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001057  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096d  00000000  00000000  00001613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f5  00000000  00000000  00001f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000840  00000000  00000000  00002e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000364d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  88:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  90:	85 b1       	in	r24, 0x05	; 5
  92:	82 60       	ori	r24, 0x02	; 2
  94:	85 b9       	out	0x05, r24	; 5
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <toggle_e+0x8>
  9c:	00 00       	nop
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	08 95       	ret

000000a6 <lcd_write>:
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	66 23       	and	r22, r22
  ac:	21 f0       	breq	.+8      	; 0xb6 <lcd_write+0x10>
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	03 c0       	rjmp	.+6      	; 0xbc <lcd_write+0x16>
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8a b9       	out	0x0a, r24	; 10
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8a b9       	out	0x0a, r24	; 10
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8f 77       	andi	r24, 0x7F	; 127
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	8b b9       	out	0x0b, r24	; 11
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	cc 23       	and	r28, r28
  ee:	1c f4       	brge	.+6      	; 0xf6 <lcd_write+0x50>
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	c6 ff       	sbrs	r28, 6
  f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_write+0x5a>
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	c5 ff       	sbrs	r28, 5
 102:	03 c0       	rjmp	.+6      	; 0x10a <lcd_write+0x64>
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	80 62       	ori	r24, 0x20	; 32
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	c4 ff       	sbrs	r28, 4
 10c:	03 c0       	rjmp	.+6      	; 0x114 <lcd_write+0x6e>
 10e:	8b b1       	in	r24, 0x0b	; 11
 110:	80 61       	ori	r24, 0x10	; 16
 112:	8b b9       	out	0x0b, r24	; 11
 114:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	8b b9       	out	0x0b, r24	; 11
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	8f 7d       	andi	r24, 0xDF	; 223
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	8f 7e       	andi	r24, 0xEF	; 239
 12e:	8b b9       	out	0x0b, r24	; 11
 130:	c3 ff       	sbrs	r28, 3
 132:	03 c0       	rjmp	.+6      	; 0x13a <lcd_write+0x94>
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	80 68       	ori	r24, 0x80	; 128
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	c2 ff       	sbrs	r28, 2
 13c:	03 c0       	rjmp	.+6      	; 0x144 <lcd_write+0x9e>
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	80 64       	ori	r24, 0x40	; 64
 142:	8b b9       	out	0x0b, r24	; 11
 144:	c1 ff       	sbrs	r28, 1
 146:	03 c0       	rjmp	.+6      	; 0x14e <lcd_write+0xa8>
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	8b b9       	out	0x0b, r24	; 11
 14e:	c0 ff       	sbrs	r28, 0
 150:	03 c0       	rjmp	.+6      	; 0x158 <lcd_write+0xb2>
 152:	8b b1       	in	r24, 0x0b	; 11
 154:	80 61       	ori	r24, 0x10	; 16
 156:	8b b9       	out	0x0b, r24	; 11
 158:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	80 61       	ori	r24, 0x10	; 16
 160:	8b b9       	out	0x0b, r24	; 11
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8b b9       	out	0x0b, r24	; 11
 174:	8f e7       	ldi	r24, 0x7F	; 127
 176:	9c e0       	ldi	r25, 0x0C	; 12
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write+0xd2>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <lcd_write+0xd8>
 17e:	00 00       	nop
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_command>:
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 18a:	08 95       	ret

0000018c <lcd_gotoxy>:
 18c:	61 11       	cpse	r22, r1
 18e:	04 c0       	rjmp	.+8      	; 0x198 <lcd_gotoxy+0xc>
 190:	80 58       	subi	r24, 0x80	; 128
 192:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
 196:	08 95       	ret
 198:	80 54       	subi	r24, 0x40	; 64
 19a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
 19e:	08 95       	ret

000001a0 <lcd_clrscr>:
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
 1a6:	08 95       	ret

000001a8 <lcd_putc>:
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_write>
 1ae:	08 95       	ret

000001b0 <lcd_puts>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	fc 01       	movw	r30, r24
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <lcd_puts+0xe>
 1b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
 1bc:	fe 01       	movw	r30, r28
 1be:	ef 01       	movw	r28, r30
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	f8 cf       	rjmp	.-16     	; 0x1b8 <lcd_puts+0x8>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1d2:	84 b1       	in	r24, 0x04	; 4
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d8:	8a b1       	in	r24, 0x0a	; 10
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1ea:	8a b1       	in	r24, 0x0a	; 10
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f0:	8a b1       	in	r24, 0x0a	; 10
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	99 ef       	ldi	r25, 0xF9	; 249
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_init+0x32>
 204:	00 c0       	rjmp	.+0      	; 0x206 <lcd_init+0x38>
 206:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	80 61       	ori	r24, 0x10	; 16
 212:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 214:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 218:	8f e1       	ldi	r24, 0x1F	; 31
 21a:	9e e4       	ldi	r25, 0x4E	; 78
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_init+0x4e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_init+0x54>
 222:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 224:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x5e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x64>
 232:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 234:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x6e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x74>
 242:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	8f 7e       	andi	r24, 0xEF	; 239
 248:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 24a:	0e 94 48 00 	call	0x90	; 0x90 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x84>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x8a>
 258:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 25a:	88 e2       	ldi	r24, 0x28	; 40
 25c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 266:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_command>
}/* lcd_init */
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <main>:
int main(void)
{
	
	
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_init>
	TIM2_overflow_16ms();
 280:	e1 eb       	ldi	r30, 0xB1	; 177
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	87 60       	ori	r24, 0x07	; 7
 288:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 28a:	e0 e7       	ldi	r30, 0x70	; 112
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	81 60       	ori	r24, 0x01	; 1
 292:	80 83       	st	Z, r24
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set the overflow prescaler to 16 ms and enable interrupt


    // Enables interrupts by setting the global interrupt mask
    sei();
 294:	78 94       	sei
 296:	ff cf       	rjmp	.-2      	; 0x296 <main+0x1c>

00000298 <__vector_9>:
/**********************************************************************
 * Function: Timer/Counter2 overflow interrupt
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	2f 93       	push	r18
 2a8:	3f 93       	push	r19
 2aa:	4f 93       	push	r20
 2ac:	5f 93       	push	r21
 2ae:	6f 93       	push	r22
 2b0:	7f 93       	push	r23
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	af 93       	push	r26
 2b8:	bf 93       	push	r27
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	27 97       	sbiw	r28, 0x07	; 7
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	cd bf       	out	0x3d, r28	; 61
	static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds

	number_of_overflows++;
 2cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <number_of_overflows.2078>
 2d0:	8f 5f       	subi	r24, 0xFF	; 255
 2d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <number_of_overflows.2078>
	if (number_of_overflows >= 6)
 2d6:	86 30       	cpi	r24, 0x06	; 6
 2d8:	08 f4       	brcc	.+2      	; 0x2dc <__vector_9+0x44>
 2da:	48 c0       	rjmp	.+144    	; 0x36c <__vector_9+0xd4>
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 2dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <number_of_overflows.2078>
		tens++; 
 2e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tens.2079>
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
 2e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tens.2079>
		
		if ( tens >= 10){
 2ea:	8a 30       	cpi	r24, 0x0A	; 10
 2ec:	58 f0       	brcs	.+22     	; 0x304 <__vector_9+0x6c>
			secs++;
 2ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			tens = 0; 
 2f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tens.2079>
			
			if ( secs >= 60 ){
 2fc:	8c 33       	cpi	r24, 0x3C	; 60
 2fe:	10 f0       	brcs	.+4      	; 0x304 <__vector_9+0x6c>
				secs = 0;
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
			 
		char seconds[5];
		char tenths[2];
		
		itoa(secs, seconds, 10);
 304:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 308:	4a e0       	ldi	r20, 0x0A	; 10
 30a:	8e 01       	movw	r16, r28
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
 310:	b8 01       	movw	r22, r16
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__itoa_ncheck>
		strcat(seconds, ".");
 318:	f8 01       	movw	r30, r16
 31a:	01 90       	ld	r0, Z+
 31c:	00 20       	and	r0, r0
 31e:	e9 f7       	brne	.-6      	; 0x31a <__vector_9+0x82>
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	8e e2       	ldi	r24, 0x2E	; 46
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	91 83       	std	Z+1, r25	; 0x01
 328:	80 83       	st	Z, r24
		itoa(tens, tenths, 10);
 32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tens.2079>
 32e:	4a e0       	ldi	r20, 0x0A	; 10
 330:	be 01       	movw	r22, r28
 332:	6a 5f       	subi	r22, 0xFA	; 250
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__itoa_ncheck>
		strcat(seconds,tenths);
 33c:	be 01       	movw	r22, r28
 33e:	6a 5f       	subi	r22, 0xFA	; 250
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	c8 01       	movw	r24, r16
 344:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <strcat>
		
		lcd_gotoxy(1, 0);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
		lcd_puts(seconds);
 350:	c8 01       	movw	r24, r16
 352:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_puts>
		
		if (secs < 10){
 356:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 35a:	8a 30       	cpi	r24, 0x0A	; 10
 35c:	38 f4       	brcc	.+14     	; 0x36c <__vector_9+0xd4>
			lcd_gotoxy(4, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_putc(' ');
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
		} 
		
	
	}
	// Else do nothing and exit the ISR
}
 36c:	27 96       	adiw	r28, 0x07	; 7
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <strcat>:
 3a2:	fb 01       	movw	r30, r22
 3a4:	dc 01       	movw	r26, r24
 3a6:	0d 90       	ld	r0, X+
 3a8:	00 20       	and	r0, r0
 3aa:	e9 f7       	brne	.-6      	; 0x3a6 <strcat+0x4>
 3ac:	11 97       	sbiw	r26, 0x01	; 1
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	00 20       	and	r0, r0
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <strcat+0xc>
 3b6:	08 95       	ret

000003b8 <__itoa_ncheck>:
 3b8:	bb 27       	eor	r27, r27
 3ba:	4a 30       	cpi	r20, 0x0A	; 10
 3bc:	31 f4       	brne	.+12     	; 0x3ca <__itoa_ncheck+0x12>
 3be:	99 23       	and	r25, r25
 3c0:	22 f4       	brpl	.+8      	; 0x3ca <__itoa_ncheck+0x12>
 3c2:	bd e2       	ldi	r27, 0x2D	; 45
 3c4:	90 95       	com	r25
 3c6:	81 95       	neg	r24
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__utoa_common>

000003ce <__utoa_ncheck>:
 3ce:	bb 27       	eor	r27, r27

000003d0 <__utoa_common>:
 3d0:	fb 01       	movw	r30, r22
 3d2:	55 27       	eor	r21, r21
 3d4:	aa 27       	eor	r26, r26
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	aa 1f       	adc	r26, r26
 3dc:	a4 17       	cp	r26, r20
 3de:	10 f0       	brcs	.+4      	; 0x3e4 <__utoa_common+0x14>
 3e0:	a4 1b       	sub	r26, r20
 3e2:	83 95       	inc	r24
 3e4:	50 51       	subi	r21, 0x10	; 16
 3e6:	b9 f7       	brne	.-18     	; 0x3d6 <__utoa_common+0x6>
 3e8:	a0 5d       	subi	r26, 0xD0	; 208
 3ea:	aa 33       	cpi	r26, 0x3A	; 58
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__utoa_common+0x20>
 3ee:	a9 5d       	subi	r26, 0xD9	; 217
 3f0:	a1 93       	st	Z+, r26
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	79 f7       	brne	.-34     	; 0x3d4 <__utoa_common+0x4>
 3f6:	b1 11       	cpse	r27, r1
 3f8:	b1 93       	st	Z+, r27
 3fa:	11 92       	st	Z+, r1
 3fc:	cb 01       	movw	r24, r22
 3fe:	0c 94 01 02 	jmp	0x402	; 0x402 <strrev>

00000402 <strrev>:
 402:	dc 01       	movw	r26, r24
 404:	fc 01       	movw	r30, r24
 406:	67 2f       	mov	r22, r23
 408:	71 91       	ld	r23, Z+
 40a:	77 23       	and	r23, r23
 40c:	e1 f7       	brne	.-8      	; 0x406 <strrev+0x4>
 40e:	32 97       	sbiw	r30, 0x02	; 2
 410:	04 c0       	rjmp	.+8      	; 0x41a <strrev+0x18>
 412:	7c 91       	ld	r23, X
 414:	6d 93       	st	X+, r22
 416:	70 83       	st	Z, r23
 418:	62 91       	ld	r22, -Z
 41a:	ae 17       	cp	r26, r30
 41c:	bf 07       	cpc	r27, r31
 41e:	c8 f3       	brcs	.-14     	; 0x412 <strrev+0x10>
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
