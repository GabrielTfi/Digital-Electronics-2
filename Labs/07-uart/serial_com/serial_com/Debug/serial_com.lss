
serial_com.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800128  00800128  0000068e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001419  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  00001c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6c  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8f  00000000  00000000  00003992  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004521  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_18>
  4c:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 36       	cpi	r26, 0x6D	; 109
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 48 01 	call	0x290	; 0x290 <main>
  9e:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <toggle_e+0x8>
  b2:	00 00       	nop
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	08 95       	ret

000000bc <lcd_write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <lcd_write+0x10>
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <lcd_write+0x16>
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 77       	andi	r24, 0x7F	; 127
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7b       	andi	r24, 0xBF	; 191
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 7e       	andi	r24, 0xEF	; 239
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x50>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x5a>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 64       	ori	r24, 0x40	; 64
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x64>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x6e>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 77       	andi	r24, 0x7F	; 127
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x94>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0x9e>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 64       	ori	r24, 0x40	; 64
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xa8>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb2>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	80 61       	ori	r24, 0x10	; 16
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	9c e0       	ldi	r25, 0x0C	; 12
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0xd2>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0xd8>
 194:	00 00       	nop
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_command>:
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1a0:	08 95       	ret

000001a2 <lcd_gotoxy>:
 1a2:	61 11       	cpse	r22, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_gotoxy+0xc>
 1a6:	80 58       	subi	r24, 0x80	; 128
 1a8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1ac:	08 95       	ret
 1ae:	80 54       	subi	r24, 0x40	; 64
 1b0:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1b4:	08 95       	ret

000001b6 <lcd_clrscr>:
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
 1bc:	08 95       	ret

000001be <lcd_putc>:
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_write>
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	fc 01       	movw	r30, r24
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <lcd_puts+0xe>
 1ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_putc>
 1d2:	fe 01       	movw	r30, r28
 1d4:	ef 01       	movw	r28, r30
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <lcd_puts+0x8>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1e8:	84 b1       	in	r24, 0x04	; 4
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f4:	84 b1       	in	r24, 0x04	; 4
 1f6:	82 60       	ori	r24, 0x02	; 2
 1f8:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1fa:	8a b1       	in	r24, 0x0a	; 10
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 200:	8a b1       	in	r24, 0x0a	; 10
 202:	80 62       	ori	r24, 0x20	; 32
 204:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 206:	8a b1       	in	r24, 0x0a	; 10
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x32>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x38>
 21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 61       	ori	r24, 0x10	; 16
 228:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x54>
 238:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x5e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_init+0x64>
 248:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <lcd_init+0x6e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_init+0x74>
 258:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8f 7e       	andi	r24, 0xEF	; 239
 25e:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x84>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x8a>
 26e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 270:	88 e2       	ldi	r24, 0x28	; 40
 272:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 276:	88 e0       	ldi	r24, 0x08	; 8
 278:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 27c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 280:	86 e0       	ldi	r24, 0x06	; 6
 282:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_command>
}/* lcd_init */
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 290:	8c e0       	ldi	r24, 0x0C	; 12
 292:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
	*/
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc

	ADMUX |= (1<<REFS0); //=0
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	80 83       	st	Z, r24
	ADMUX  &=~ (1<<REFS1); //=1
 2a0:	80 81       	ld	r24, Z
 2a2:	8f 77       	andi	r24, 0x7F	; 127
 2a4:	80 83       	st	Z, r24

    // Set input channel to ADC0

	ADMUX &=~ (1<<MUX3 | 1<<MUX2 | 1<<MUX1 | 1<<MUX0);
 2a6:	80 81       	ld	r24, Z
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	80 83       	st	Z, r24

    // Enable ADC module

	ADCSRA |= (1<<ADEN);
 2ac:	ea e7       	ldi	r30, 0x7A	; 122
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 68       	ori	r24, 0x80	; 128
 2b4:	80 83       	st	Z, r24

    // Enable conversion complete interrupt

	ADCSRA |= (1<<ADIE);
 2b6:	80 81       	ld	r24, Z
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	80 83       	st	Z, r24

    // Set clock prescaler to 128

	ADCSRA |= (1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0);
 2bc:	80 81       	ld	r24, Z
 2be:	87 60       	ori	r24, 0x07	; 7
 2c0:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Set prescaler to 262 ms and enable overflow interrupt
	
	TIM1_overflow_262ms();
 2c2:	e1 e8       	ldi	r30, 0x81	; 129
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	80 83       	st	Z, r24
 2cc:	80 81       	ld	r24, Z
 2ce:	83 60       	ori	r24, 0x03	; 3
 2d0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 2d2:	ef e6       	ldi	r30, 0x6F	; 111
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
	
	// Initialize UART to asynchronous, 8N1, 9600
	
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 2dc:	87 e6       	ldi	r24, 0x67	; 103
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 75 02 	call	0x4ea	; 0x4ea <uart_init>
	
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 2e4:	78 94       	sei
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <main+0x56>

000002e8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Use single conversion mode and start conversion four times
 *           per second.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	8f 93       	push	r24
 2f4:	ef 93       	push	r30
 2f6:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1<<ADSC);
 2f8:	ea e7       	ldi	r30, 0x7A	; 122
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	80 83       	st	Z, r24

}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_21>:
/**********************************************************************
 * Function: ADC complete interrupt
 * Purpose:  Display value on LCD and send it to UART.
 **********************************************************************/
ISR(ADC_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <__vector_21+0x2c>
 33e:	00 d0       	rcall	.+0      	; 0x340 <__vector_21+0x2e>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
    // WRITE YOUR CODE HERE
	
	uint16_t value = 0; 
	
	char lcd_string[4] = "0000";
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	90 e3       	ldi	r25, 0x30	; 48
 348:	9a 83       	std	Y+2, r25	; 0x02
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	9c 83       	std	Y+4, r25	; 0x04
 34e:	8b 83       	std	Y+3, r24	; 0x03
	value = ADC; 
 350:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 354:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 358:	4a e0       	ldi	r20, 0x0A	; 10
 35a:	be 01       	movw	r22, r28
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	c8 01       	movw	r24, r16
 362:	0e 94 b2 02 	call	0x564	; 0x564 <__itoa_ncheck>
	
	
	itoa(value, lcd_string, 10);
	lcd_gotoxy(0,0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts("    ");
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	lcd_gotoxy(0,0);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts(lcd_string);
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	
	//Send ADC value to our UART Tx
	
	uart_puts(lcd_string);
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts>
	uart_puts("  ");
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 a5 02 	call	0x54a	; 0x54a <uart_puts>
	
	lcd_gotoxy(0,0);
	lcd_puts("       ");
	lcd_gotoxy(0,0);
	*/
	lcd_gotoxy(0,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	lcd_puts("       ");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	lcd_gotoxy(0,1);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_gotoxy>
	

	if (value == 650){
 3ae:	0a 38       	cpi	r16, 0x8A	; 138
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	18 07       	cpc	r17, r24
 3b4:	29 f4       	brne	.+10     	; 0x3c0 <__vector_21+0xae>
		lcd_puts("select");
 3b6:	88 e0       	ldi	r24, 0x08	; 8
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3be:	24 c0       	rjmp	.+72     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else if (value == 402){
 3c0:	02 39       	cpi	r16, 0x92	; 146
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	18 07       	cpc	r17, r24
 3c6:	29 f4       	brne	.+10     	; 0x3d2 <__vector_21+0xc0>
		lcd_puts("left");
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3d0:	1b c0       	rjmp	.+54     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else if (value == 245){
 3d2:	05 3f       	cpi	r16, 0xF5	; 245
 3d4:	11 05       	cpc	r17, r1
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <__vector_21+0xd0>
		lcd_puts("down");
 3d8:	84 e1       	ldi	r24, 0x14	; 20
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3e0:	13 c0       	rjmp	.+38     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else if (value == 101){
 3e2:	05 36       	cpi	r16, 0x65	; 101
 3e4:	11 05       	cpc	r17, r1
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <__vector_21+0xe0>
		lcd_puts("up");
 3e8:	89 e1       	ldi	r24, 0x19	; 25
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3f0:	0b c0       	rjmp	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else if (value == 0){
 3f2:	01 2b       	or	r16, r17
 3f4:	29 f4       	brne	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
		lcd_puts("right");
 3f6:	8c e1       	ldi	r24, 0x1C	; 28
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 3fe:	04 c0       	rjmp	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	}
	else{
		lcd_puts("none");
 400:	82 e2       	ldi	r24, 0x22	; 34
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	
	//Display what button was pressed at position "c"

	
	
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	ef 93       	push	r30
 44c:	ff 93       	push	r31
 44e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 452:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 456:	8c 71       	andi	r24, 0x1C	; 28
 458:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <UART_RxHead>
 45c:	ef 5f       	subi	r30, 0xFF	; 255
 45e:	ef 71       	andi	r30, 0x1F	; 31
 460:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_RxTail>
 464:	e9 17       	cp	r30, r25
 466:	39 f0       	breq	.+14     	; 0x476 <__vector_18+0x3c>
 468:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <UART_RxHead>
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	e3 5d       	subi	r30, 0xD3	; 211
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	20 83       	st	Z, r18
 474:	01 c0       	rjmp	.+2      	; 0x478 <__vector_18+0x3e>
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <__data_end>
 47c:	89 2b       	or	r24, r25
 47e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti

00000496 <__vector_19>:
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
 4a8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <UART_TxHead>
 4ac:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <UART_TxTail>
 4b0:	98 17       	cp	r25, r24
 4b2:	69 f0       	breq	.+26     	; 0x4ce <__vector_19+0x38>
 4b4:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <UART_TxTail>
 4b8:	ef 5f       	subi	r30, 0xFF	; 255
 4ba:	ef 71       	andi	r30, 0x1F	; 31
 4bc:	e0 93 2b 01 	sts	0x012B, r30	; 0x80012b <UART_TxTail>
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	e3 5b       	subi	r30, 0xB3	; 179
 4c4:	fe 4f       	sbci	r31, 0xFE	; 254
 4c6:	80 81       	ld	r24, Z
 4c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__vector_19+0x42>
 4ce:	e1 ec       	ldi	r30, 0xC1	; 193
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	8f 7d       	andi	r24, 0xDF	; 223
 4d6:	80 83       	st	Z, r24
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <uart_init>:
 4ea:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <UART_TxHead>
 4ee:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <UART_TxTail>
 4f2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <UART_RxHead>
 4f6:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <UART_RxTail>
 4fa:	28 2f       	mov	r18, r24
 4fc:	39 2f       	mov	r19, r25
 4fe:	33 23       	and	r19, r19
 500:	1c f4       	brge	.+6      	; 0x508 <uart_init+0x1e>
 502:	22 e0       	ldi	r18, 0x02	; 2
 504:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 508:	90 78       	andi	r25, 0x80	; 128
 50a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 50e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 512:	88 e9       	ldi	r24, 0x98	; 152
 514:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 518:	86 e0       	ldi	r24, 0x06	; 6
 51a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 51e:	08 95       	ret

00000520 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 520:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <UART_TxHead>
 524:	2f 5f       	subi	r18, 0xFF	; 255
 526:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 528:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <UART_TxTail>
 52c:	29 17       	cp	r18, r25
 52e:	e1 f3       	breq	.-8      	; 0x528 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 530:	e2 2f       	mov	r30, r18
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	e3 5b       	subi	r30, 0xB3	; 179
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 53a:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 53e:	e1 ec       	ldi	r30, 0xC1	; 193
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	80 62       	ori	r24, 0x20	; 32
 546:	80 83       	st	Z, r24
 548:	08 95       	ret

0000054a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	ec 01       	movw	r28, r24
    while (*s)
 550:	03 c0       	rjmp	.+6      	; 0x558 <uart_puts+0xe>
        uart_putc(*s++);
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	0e 94 90 02 	call	0x520	; 0x520 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 558:	88 81       	ld	r24, Y
 55a:	81 11       	cpse	r24, r1
 55c:	fa cf       	rjmp	.-12     	; 0x552 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <__itoa_ncheck>:
 564:	bb 27       	eor	r27, r27
 566:	4a 30       	cpi	r20, 0x0A	; 10
 568:	31 f4       	brne	.+12     	; 0x576 <__itoa_ncheck+0x12>
 56a:	99 23       	and	r25, r25
 56c:	22 f4       	brpl	.+8      	; 0x576 <__itoa_ncheck+0x12>
 56e:	bd e2       	ldi	r27, 0x2D	; 45
 570:	90 95       	com	r25
 572:	81 95       	neg	r24
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	0c 94 be 02 	jmp	0x57c	; 0x57c <__utoa_common>

0000057a <__utoa_ncheck>:
 57a:	bb 27       	eor	r27, r27

0000057c <__utoa_common>:
 57c:	fb 01       	movw	r30, r22
 57e:	55 27       	eor	r21, r21
 580:	aa 27       	eor	r26, r26
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	aa 1f       	adc	r26, r26
 588:	a4 17       	cp	r26, r20
 58a:	10 f0       	brcs	.+4      	; 0x590 <__utoa_common+0x14>
 58c:	a4 1b       	sub	r26, r20
 58e:	83 95       	inc	r24
 590:	50 51       	subi	r21, 0x10	; 16
 592:	b9 f7       	brne	.-18     	; 0x582 <__utoa_common+0x6>
 594:	a0 5d       	subi	r26, 0xD0	; 208
 596:	aa 33       	cpi	r26, 0x3A	; 58
 598:	08 f0       	brcs	.+2      	; 0x59c <__utoa_common+0x20>
 59a:	a9 5d       	subi	r26, 0xD9	; 217
 59c:	a1 93       	st	Z+, r26
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	79 f7       	brne	.-34     	; 0x580 <__utoa_common+0x4>
 5a2:	b1 11       	cpse	r27, r1
 5a4:	b1 93       	st	Z+, r27
 5a6:	11 92       	st	Z+, r1
 5a8:	cb 01       	movw	r24, r22
 5aa:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <strrev>

000005ae <strrev>:
 5ae:	dc 01       	movw	r26, r24
 5b0:	fc 01       	movw	r30, r24
 5b2:	67 2f       	mov	r22, r23
 5b4:	71 91       	ld	r23, Z+
 5b6:	77 23       	and	r23, r23
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <strrev+0x4>
 5ba:	32 97       	sbiw	r30, 0x02	; 2
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <strrev+0x18>
 5be:	7c 91       	ld	r23, X
 5c0:	6d 93       	st	X+, r22
 5c2:	70 83       	st	Z, r23
 5c4:	62 91       	ld	r22, -Z
 5c6:	ae 17       	cp	r26, r30
 5c8:	bf 07       	cpc	r27, r31
 5ca:	c8 f3       	brcs	.-14     	; 0x5be <strrev+0x10>
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
