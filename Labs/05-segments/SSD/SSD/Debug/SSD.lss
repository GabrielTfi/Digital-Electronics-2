
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  0000034a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9e  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000847  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  00001a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000397  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
}

/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high( volatile uint8_t *reg_name, uint8_t pin_num){
  d8:	fc 01       	movw	r30, r24
	*reg_name = *reg_name | ~(1<<pin_num);
  da:	90 81       	ld	r25, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	20 95       	com	r18
  ec:	29 2b       	or	r18, r25
  ee:	20 83       	st	Z, r18
  f0:	08 95       	ret

000000f2 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f2:	0e 94 cb 00 	call	0x196	; 0x196 <SEG_init>

    // Test of SSD: display number '8' at position 3
    //                        abcdefgDP   p3p2p1p0
    SEG_update_shift_regs(7, 3);
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 10e:	ef e6       	ldi	r30, 0x6F	; 111
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24

	// Configure 8-bit Timer/Counter1 for Decimal counter
	TIM0_overflow_4ms()
 118:	85 b5       	in	r24, 0x25	; 37
 11a:	8c 7f       	andi	r24, 0xFC	; 252
 11c:	85 bd       	out	0x25, r24	; 37
 11e:	85 b5       	in	r24, 0x25	; 37
 120:	84 60       	ori	r24, 0x04	; 4
 122:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 124:	ee e6       	ldi	r30, 0x6E	; 110
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24


    // Enables interrupts by setting the global interrupt mask
    sei();
 12e:	78 94       	sei
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x3e>

00000132 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
    cnt0++;
 154:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
    if(cnt0 > 9)
 15e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	10 f0       	brcs	.+4      	; 0x16a <__vector_13+0x38>
    {
        cnt0 = 0;
 166:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
    }
    SEG_update_shift_regs(cnt0,0);
 16a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	0e 94 db 00 	call	0x1b6	; 0x1b6 <SEG_update_shift_regs>

 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	8a e2       	ldi	r24, 0x2A	; 42
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	8a e2       	ldi	r24, 0x2A	; 42
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	84 e2       	ldi	r24, 0x24	; 36
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1b4:	08 95       	ret

000001b6 <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments]; 
 1bc:	e8 2f       	mov	r30, r24
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 5f       	subi	r30, 0xFC	; 252
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	10 81       	ld	r17, Z
	position = segment_position[position];
 1c6:	e6 2f       	mov	r30, r22
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e0 50       	subi	r30, 0x00	; 0
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD,SEG_LATCH );
 1d0:	64 e0       	ldi	r22, 0x04	; 4
 1d2:	8b e2       	ldi	r24, 0x2B	; 43
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD,SEG_CLK );
 1da:	67 e0       	ldi	r22, 0x07	; 7
 1dc:	8b e2       	ldi	r24, 0x2B	; 43
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB,SEG_DATA );
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	85 e2       	ldi	r24, 0x25	; 37
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <SEG_update_shift_regs+0x3a>
 1f4:	00 00       	nop
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	21 c0       	rjmp	.+66     	; 0x23c <SEG_update_shift_regs+0x86>
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
		
		if ( (segments & 1)  == 0 ) 
 1fa:	10 fd       	sbrc	r17, 0
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <SEG_update_shift_regs+0x54>
			GPIO_write_low(&PORTB,SEG_DATA);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	85 e2       	ldi	r24, 0x25	; 37
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 208:	05 c0       	rjmp	.+10     	; 0x214 <SEG_update_shift_regs+0x5e>
		else 
			GPIO_write_high(&PORTB,SEG_DATA);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <SEG_update_shift_regs+0x60>
 21a:	00 00       	nop
        
		// Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD,SEG_CLK );
 21c:	67 e0       	ldi	r22, 0x07	; 7
 21e:	8b e2       	ldi	r24, 0x2B	; 43
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 226:	85 e0       	ldi	r24, 0x05	; 5
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <SEG_update_shift_regs+0x72>
 22c:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD,SEG_CLK );
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	8b e2       	ldi	r24, 0x2B	; 43
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 238:	16 95       	lsr	r17
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 23a:	cf 5f       	subi	r28, 0xFF	; 255
 23c:	c8 30       	cpi	r28, 0x08	; 8
 23e:	e8 f2       	brcs	.-70     	; 0x1fa <SEG_update_shift_regs+0x44>
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	21 c0       	rjmp	.+66     	; 0x286 <SEG_update_shift_regs+0xd0>
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
		
		if ( (position & 1)  == 0 )
 244:	d0 fd       	sbrc	r29, 0
 246:	06 c0       	rjmp	.+12     	; 0x254 <SEG_update_shift_regs+0x9e>
			GPIO_write_low(&PORTB,SEG_DATA);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	85 e2       	ldi	r24, 0x25	; 37
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 252:	05 c0       	rjmp	.+10     	; 0x25e <SEG_update_shift_regs+0xa8>
		else
			GPIO_write_high(&PORTB,SEG_DATA);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	85 e2       	ldi	r24, 0x25	; 37
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <SEG_update_shift_regs+0xaa>
 264:	00 00       	nop
        
		// Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD,SEG_CLK );
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	8b e2       	ldi	r24, 0x2B	; 43
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <SEG_update_shift_regs+0xbc>
 276:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD,SEG_CLK );
 278:	67 e0       	ldi	r22, 0x07	; 7
 27a:	8b e2       	ldi	r24, 0x2B	; 43
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 282:	d6 95       	lsr	r29
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 284:	cf 5f       	subi	r28, 0xFF	; 255
 286:	c8 30       	cpi	r28, 0x08	; 8
 288:	e8 f2       	brcs	.-70     	; 0x244 <SEG_update_shift_regs+0x8e>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD,SEG_LATCH );
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	8b e2       	ldi	r24, 0x2B	; 43
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 294:	85 e0       	ldi	r24, 0x05	; 5
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <SEG_update_shift_regs+0xe0>
 29a:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
