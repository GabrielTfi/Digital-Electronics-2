
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000434  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800124  00800124  000004ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eae  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000932  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b3  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000583  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000318b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_18>
  4c:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 36       	cpi	r26, 0x69	; 105
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 18 02 	jmp	0x430	; 0x430 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 00 01 	call	0x200	; 0x200 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a6 01 	call	0x34c	; 0x34c <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_13+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	41 f0       	breq	.+16     	; 0x126 <__vector_13+0x4e>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	f1 f1       	breq	.+124    	; 0x196 <__vector_13+0xbe>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_13+0x48>
 11e:	57 c0       	rjmp	.+174    	; 0x1ce <__vector_13+0xf6>
			state = STATE_SEND;		
		}
		else{
			state = STATE_IDLE;	
		}*/
		state = STATE_IDLE;	
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		break; 
 124:	57 c0       	rjmp	.+174    	; 0x1d4 <__vector_13+0xfc>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 126:	8e e0       	ldi	r24, 0x0E	; 14
 128:	0e 94 0f 01 	call	0x21e	; 0x21e <twi_start>
        
		
		// temperature read ----------------------
		twi_write(0x00);
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 2c 01 	call	0x258	; 0x258 <twi_write>
		twi_stop();
 132:	0e 94 4a 01 	call	0x294	; 0x294 <twi_stop>
		result = twi_start((addr<<1) + TWI_WRITE);
 136:	8e e0       	ldi	r24, 0x0E	; 14
 138:	0e 94 0f 01 	call	0x21e	; 0x21e <twi_start>
		
		//temperature integer part
		result = twi_read_ack();
 13c:	0e 94 36 01 	call	0x26c	; 0x26c <twi_read_ack>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 140:	4a e0       	ldi	r20, 0x0A	; 10
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__itoa_ncheck>
		itoa(result,uart_string,10);
		uart_puts(uart_string);
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		
		//temperature fractional part
		result = twi_read_nack();
 156:	0e 94 40 01 	call	0x280	; 0x280 <twi_read_nack>
 15a:	18 2f       	mov	r17, r24
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__itoa_ncheck>
		itoa(result,uart_string,10);
		uart_puts(".");
 16a:	8f e1       	ldi	r24, 0x1F	; 31
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		uart_puts(uart_string);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		uart_puts(" ");
 17a:	81 e2       	ldi	r24, 0x21	; 33
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		//----------------------
		
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		
		if (result == 0){
 182:	11 11       	cpse	r17, r1
 184:	04 c0       	rjmp	.+8      	; 0x18e <__vector_13+0xb6>
			state = STATE_ACK;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	23 c0       	rjmp	.+70     	; 0x1d4 <__vector_13+0xfc>
		}
		else{
			state = STATE_IDLE;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	1f c0       	rjmp	.+62     	; 0x1d4 <__vector_13+0xfc>
 196:	40 e1       	ldi	r20, 0x10	; 16
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	87 e0       	ldi	r24, 0x07	; 7
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__itoa_ncheck>
    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		
		itoa(addr, uart_string, 16);
		uart_puts(uart_string);
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		uart_puts(" ");
 1ae:	81 e2       	ldi	r24, 0x21	; 33
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		uart_puts(uart_string);
 1b6:	ce 01       	movw	r24, r28
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		uart_puts(" ");
 1be:	81 e2       	ldi	r24, 0x21	; 33
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_puts>
		state = STATE_IDLE;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <__vector_13+0xfc>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        break;
    }
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	1f 91       	pop	r17
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <twi_init>:
 200:	87 b1       	in	r24, 0x07	; 7
 202:	8f 7c       	andi	r24, 0xCF	; 207
 204:	87 b9       	out	0x07, r24	; 7
 206:	88 b1       	in	r24, 0x08	; 8
 208:	80 63       	ori	r24, 0x30	; 48
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	e9 eb       	ldi	r30, 0xB9	; 185
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	8c 7f       	andi	r24, 0xFC	; 252
 214:	80 83       	st	Z, r24
 216:	88 e9       	ldi	r24, 0x98	; 152
 218:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 21c:	08 95       	ret

0000021e <twi_start>:
 21e:	94 ea       	ldi	r25, 0xA4	; 164
 220:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	99 23       	and	r25, r25
 22a:	e4 f7       	brge	.-8      	; 0x224 <twi_start+0x6>
 22c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 230:	84 e8       	ldi	r24, 0x84	; 132
 232:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 236:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	88 23       	and	r24, r24
 23c:	e4 f7       	brge	.-8      	; 0x236 <twi_start+0x18>
 23e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 242:	88 7f       	andi	r24, 0xF8	; 248
 244:	88 31       	cpi	r24, 0x18	; 24
 246:	21 f0       	breq	.+8      	; 0x250 <twi_start+0x32>
 248:	80 34       	cpi	r24, 0x40	; 64
 24a:	21 f4       	brne	.+8      	; 0x254 <twi_start+0x36>
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	08 95       	ret

00000258 <twi_write>:
 258:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 25c:	84 e8       	ldi	r24, 0x84	; 132
 25e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 262:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 266:	88 23       	and	r24, r24
 268:	e4 f7       	brge	.-8      	; 0x262 <twi_write+0xa>
 26a:	08 95       	ret

0000026c <twi_read_ack>:
 26c:	84 ec       	ldi	r24, 0xC4	; 196
 26e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 272:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 276:	88 23       	and	r24, r24
 278:	e4 f7       	brge	.-8      	; 0x272 <twi_read_ack+0x6>
 27a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 27e:	08 95       	ret

00000280 <twi_read_nack>:
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 286:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 28a:	88 23       	and	r24, r24
 28c:	e4 f7       	brge	.-8      	; 0x286 <twi_read_nack+0x6>
 28e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 292:	08 95       	ret

00000294 <twi_stop>:
 294:	84 e9       	ldi	r24, 0x94	; 148
 296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29a:	08 95       	ret

0000029c <__vector_18>:
 29c:	1f 92       	push	r1
 29e:	0f 92       	push	r0
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	0f 92       	push	r0
 2a4:	11 24       	eor	r1, r1
 2a6:	2f 93       	push	r18
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
 2b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2b4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2b8:	8c 71       	andi	r24, 0x1C	; 28
 2ba:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <UART_RxHead>
 2be:	ef 5f       	subi	r30, 0xFF	; 255
 2c0:	ef 71       	andi	r30, 0x1F	; 31
 2c2:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_RxTail>
 2c6:	e9 17       	cp	r30, r25
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <__vector_18+0x3c>
 2ca:	e0 93 26 01 	sts	0x0126, r30	; 0x800126 <UART_RxHead>
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e7 5d       	subi	r30, 0xD7	; 215
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	20 83       	st	Z, r18
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <__vector_18+0x3e>
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 2de:	89 2b       	or	r24, r25
 2e0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 2e4:	ff 91       	pop	r31
 2e6:	ef 91       	pop	r30
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <__vector_19>:
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_TxHead>
 30e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <UART_TxTail>
 312:	98 17       	cp	r25, r24
 314:	69 f0       	breq	.+26     	; 0x330 <__vector_19+0x38>
 316:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_TxTail>
 31a:	ef 5f       	subi	r30, 0xFF	; 255
 31c:	ef 71       	andi	r30, 0x1F	; 31
 31e:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_TxTail>
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	e7 5b       	subi	r30, 0xB7	; 183
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	80 81       	ld	r24, Z
 32a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 32e:	05 c0       	rjmp	.+10     	; 0x33a <__vector_19+0x42>
 330:	e1 ec       	ldi	r30, 0xC1	; 193
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	8f 7d       	andi	r24, 0xDF	; 223
 338:	80 83       	st	Z, r24
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <uart_init>:
 34c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <UART_TxHead>
 350:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <UART_TxTail>
 354:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_RxHead>
 358:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <UART_RxTail>
 35c:	28 2f       	mov	r18, r24
 35e:	39 2f       	mov	r19, r25
 360:	33 23       	and	r19, r19
 362:	1c f4       	brge	.+6      	; 0x36a <uart_init+0x1e>
 364:	22 e0       	ldi	r18, 0x02	; 2
 366:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 36a:	90 78       	andi	r25, 0x80	; 128
 36c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 370:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 374:	88 e9       	ldi	r24, 0x98	; 152
 376:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 380:	08 95       	ret

00000382 <uart_putc>:
 382:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <UART_TxHead>
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	2f 71       	andi	r18, 0x1F	; 31
 38a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <UART_TxTail>
 38e:	29 17       	cp	r18, r25
 390:	e1 f3       	breq	.-8      	; 0x38a <uart_putc+0x8>
 392:	e2 2f       	mov	r30, r18
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	e7 5b       	subi	r30, 0xB7	; 183
 398:	fe 4f       	sbci	r31, 0xFE	; 254
 39a:	80 83       	st	Z, r24
 39c:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <UART_TxHead>
 3a0:	e1 ec       	ldi	r30, 0xC1	; 193
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <uart_puts>:
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <uart_puts+0xe>
 3b4:	21 96       	adiw	r28, 0x01	; 1
 3b6:	0e 94 c1 01 	call	0x382	; 0x382 <uart_putc>
 3ba:	88 81       	ld	r24, Y
 3bc:	81 11       	cpse	r24, r1
 3be:	fa cf       	rjmp	.-12     	; 0x3b4 <uart_puts+0x8>
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <__itoa_ncheck>:
 3c6:	bb 27       	eor	r27, r27
 3c8:	4a 30       	cpi	r20, 0x0A	; 10
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <__itoa_ncheck+0x12>
 3cc:	99 23       	and	r25, r25
 3ce:	22 f4       	brpl	.+8      	; 0x3d8 <__itoa_ncheck+0x12>
 3d0:	bd e2       	ldi	r27, 0x2D	; 45
 3d2:	90 95       	com	r25
 3d4:	81 95       	neg	r24
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__utoa_common>

000003dc <__utoa_ncheck>:
 3dc:	bb 27       	eor	r27, r27

000003de <__utoa_common>:
 3de:	fb 01       	movw	r30, r22
 3e0:	55 27       	eor	r21, r21
 3e2:	aa 27       	eor	r26, r26
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	aa 1f       	adc	r26, r26
 3ea:	a4 17       	cp	r26, r20
 3ec:	10 f0       	brcs	.+4      	; 0x3f2 <__utoa_common+0x14>
 3ee:	a4 1b       	sub	r26, r20
 3f0:	83 95       	inc	r24
 3f2:	50 51       	subi	r21, 0x10	; 16
 3f4:	b9 f7       	brne	.-18     	; 0x3e4 <__utoa_common+0x6>
 3f6:	a0 5d       	subi	r26, 0xD0	; 208
 3f8:	aa 33       	cpi	r26, 0x3A	; 58
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <__utoa_common+0x20>
 3fc:	a9 5d       	subi	r26, 0xD9	; 217
 3fe:	a1 93       	st	Z+, r26
 400:	00 97       	sbiw	r24, 0x00	; 0
 402:	79 f7       	brne	.-34     	; 0x3e2 <__utoa_common+0x4>
 404:	b1 11       	cpse	r27, r1
 406:	b1 93       	st	Z+, r27
 408:	11 92       	st	Z+, r1
 40a:	cb 01       	movw	r24, r22
 40c:	0c 94 08 02 	jmp	0x410	; 0x410 <strrev>

00000410 <strrev>:
 410:	dc 01       	movw	r26, r24
 412:	fc 01       	movw	r30, r24
 414:	67 2f       	mov	r22, r23
 416:	71 91       	ld	r23, Z+
 418:	77 23       	and	r23, r23
 41a:	e1 f7       	brne	.-8      	; 0x414 <strrev+0x4>
 41c:	32 97       	sbiw	r30, 0x02	; 2
 41e:	04 c0       	rjmp	.+8      	; 0x428 <strrev+0x18>
 420:	7c 91       	ld	r23, X
 422:	6d 93       	st	X+, r22
 424:	70 83       	st	Z, r23
 426:	62 91       	ld	r22, -Z
 428:	ae 17       	cp	r26, r30
 42a:	bf 07       	cpc	r27, r31
 42c:	c8 f3       	brcs	.-14     	; 0x420 <strrev+0x10>
 42e:	08 95       	ret

00000430 <_exit>:
 430:	f8 94       	cli

00000432 <__stop_program>:
 432:	ff cf       	rjmp	.-2      	; 0x432 <__stop_program>
